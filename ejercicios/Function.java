package ejercicios;

public class Function {

    /*
    1)
    if we list all natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23.
    Find the sum of all the multiples of 3 or 5 below 1000.
    */

    public int sumOfMultiplesOf_3_or_5(int until){
        int sum = 0;
        for(int i = 1; i < until; i++){
            if(i % 3 == 0 || i % 5 == 0){
                sum+=i;
            }
        }
        return sum;
    }

    //recursive version of sumOfMultiplesOf_3_or_5
    public int sumOfMultiplesOf_3_or_5(int count, int until){
        if(count == until){  //base case
            return 0;
        }
        if(count % 3 == 0 || count % 5 == 0){
            return count + sumOfMultiplesOf_3_or_5(count  + 1 , until);
        }
        return sumOfMultiplesOf_3_or_5(count + 1 , until);
    }
    //-------------------------------------------------------------------------------------------------------------------------------

    /*
    2)
    Each new term in the Fibonacci sequence is generated by adding the previous two terms
    By starting with 1 and 2,the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, fin the sum of even-valued terms.
    */


    // 0<= previous < current < until
    public int evenFibonacciNumbers(int previous, int current, int until){
        if(current >= until){
            return 0;
        }
        if(current % 2 == 0){
            return current + evenFibonacciNumbers(current, previous + current, until);
        }
        return evenFibonacciNumbers(current, previous + current, until);
    }

    //--------------------------------------------------------------------------------------------------------------------------

    /*
    3)
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143?
    */


    //number > 1
    public long largestPrimeFactorOf(long number){

        long largestPrimeFactor = -1;

        long div = 2;

        while(div <= number ){

            if(number % div == 0 && isPrime(div)){
                largestPrimeFactor = div;
                number = number/div;
            }else{
                div++;
            }
        }
        return largestPrimeFactor;
    }

    public boolean isPrime(long number){

        //if I find a number that divides "number" then "number" is not prime
        for(long i = 2; i < number ; i++){
            if(number % i == 0){
                return false;
            }
        }
        return true;
    }

    //------------------------------------------------------------------------------------------------------------------

    /*
    4) A palindrome number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is
    9009 = 91x99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    * */
    public Integer largestPalindrome(){
        Integer largestPalindrome = 0;

        // 100 <= i <= 999
        for(int i = 100; i < 1000 ; i++){           //100 is the smallest 3-digit number
            for(int j = i ; j < 1000; j++){

                Integer product = i*j;

                if(isPalindrome(product) && product>largestPalindrome){
                    largestPalindrome = product;
                }
            }
        }

        return largestPalindrome;
    }
    private boolean isPalindrome(Integer number){
        String numberString = number.toString();

        StringBuilder sb = new StringBuilder();
        sb.append(numberString);

        sb.reverse();

        if(numberString.equals(sb.toString())){
            return true;
        }
        return false;
    }
}










































